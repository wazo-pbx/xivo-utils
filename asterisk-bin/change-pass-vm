#!/usr/bin/env python3
# Copyright 2006-2018 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0+

import argparse
import sys
import yaml

from xivo.chain_map import ChainMap
from xivo.config_helper import parse_config_file
from xivo_auth_client import Client as AuthClient
from xivo_confd_client import Client as ConfdClient


_DEFAULT_CERT_FILE = '/usr/share/xivo-certs/server.crt'
_DEFAULT_CONFIG = {
    'auth': {
        'host': 'localhost',
        'port': 9497,
        'key_file': '/var/lib/xivo-auth-keys/change_vm_pass-key.yml',
        'verify_certificate': _DEFAULT_CERT_FILE,
        'backend': 'xivo_service',
    },
    'confd': {
        'host': 'localhost',
        'port': 9486,
        'verify_certificate': _DEFAULT_CERT_FILE,
    },
}


def _load_config(cli_config):
    config_filename = cli_config.get('config_file')
    file_config = parse_config_file(config_filename) if config_filename else {}
    service_key = _load_key_file(ChainMap(cli_config, file_config, _DEFAULT_CONFIG))
    return ChainMap(cli_config, service_key, file_config, _DEFAULT_CONFIG)


def _load_key_file(config):
    key_file = parse_config_file(config['auth']['key_file'])
    return {
        'auth': {
            'username': key_file['service_id'],
            'password': key_file['service_key'],
        },
    }


def get_voicemail(client, number, context):
    response = client.voicemails.list(search=number, recurse=True)

    def matches(vm):
        return vm['number'] == number and vm['context'] == context

    found = [v for v in response['items'] if matches(v)]

    assert len(found) > 0, "voicemail {}@{} not found!".format(number, context)
    assert len(found) == 1, "more than one voicemail found when searching for {}@{}".format(number, context)
    return found[0]


def update_password(client, voicemail, new_password):
    voicemail['password'] = new_password
    client.voicemails.update(voicemail)


def _parse_cli_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config-file', help='The path to the config file')
    parser.add_argument('--dump-config', action='store_true',
                        help='Prints the current configuration')
    parser.add_argument('context', help='The voicemail context')
    parser.add_argument('number', help='The voicemail number')
    parser.add_argument('password', help='The new password')
    parsed_args = parser.parse_args()

    cli_config = {}
    if parsed_args.config_file:
        cli_config['config_file'] = parsed_args.config_file
    if parsed_args.dump_config:
        cli_config['dump_config'] = parsed_args.dump_config

    context = parsed_args.context or None
    number = parsed_args.number or None
    password = parsed_args.password or None

    return context, number, password, cli_config


def _dump_config(config):
    conf = dict(config)
    conf['auth'].pop('username', None)
    conf['auth'].pop('password', None)
    conf.pop('dump_config', None)
    conf.pop('config_file', None)
    print(yaml.dump(conf))


def _change_password(config, context, number, password):
    auth = AuthClient(**config['auth'])
    token = auth.token.new(config['auth']['backend'], expiration=60)['token']

    confd = ConfdClient(token=token, **config['confd'])
    voicemail = get_voicemail(confd, number, context)
    update_password(confd, voicemail, password)


def main(args):
    context, number, password, cli_config = _parse_cli_args(args)
    config = _load_config(cli_config)

    if config.get('dump_config'):
        _dump_config(config)
    else:
        _change_password(config, context, number, password)


if __name__ == "__main__":
    main(sys.argv)
