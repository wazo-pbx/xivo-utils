#!/usr/bin/python

# Copyright (C) 2006-2015 Avencall
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

import sys
import requests
import json

from xivo_dao.resources.user_voicemail import dao as user_voicemail_dao

URL = "http://localhost:9487/1.1"

if len(sys.argv) != 4:
    raise ValueError("Missing args!")

session = requests.Session()
session.headers = {'Accept': 'application/json',
                   'Content-Type': 'application/json'}

context = sys.argv[1]
mailbox = sys.argv[2]
new_password = sys.argv[3]


def get_voicemail(mailbox, context):
    url = "{}/voicemails".format(URL)
    response = session.get(url, params={'search': mailbox})

    found = [v for v in response.json()['items']
             if v['number'] == mailbox and v['context'] == context]

    assert len(found) == 1, "voicemail {}@{} not found!".format(mailbox, context)
    return found[0]


def get_user_for_voicemail(voicemail):
    # We use the DAO because this isn't available in confd yet
    user_voicemails = user_voicemail_dao.find_all_by_voicemail_id(voicemail['id'])

    url = "{}/users/{}".format(URL, user_voicemails[0].user_id)
    response = session.get(url)
    return response.json()


def dissociate_voicemail(voicemail):
    url = "{}/users/{}/voicemail".format(URL, user['id'])
    response = session.delete(url)
    assert response.status_code == 204, "error dissociating voicemail for user {}".format(user['id'])


def update_password(voicemail, new_password):
    url = "{}/voicemails/{}".format(URL, voicemail['id'])
    body = json.dumps({'password': new_password})
    response = session.put(url, data=body)
    assert response.status_code == 204, "error updating password for voicemail {}".format(voicemail['id'])


def associate_voicemail(user, voicemail):
    url = "{}/users/{}/voicemail".format(URL, user['id'])
    body = json.dumps({'voicemail_id': voicemail['id']})
    response = session.post(url, data=body)
    assert response.status_code == 201, "error associating user {} and voicemail {}".format(user['id'], voicemail['id'])


# Currently, we need to dissociate the voicemail from the user before editing it.
voicemail = get_voicemail(mailbox, context)
user = get_user_for_voicemail(voicemail)
dissociate_voicemail(user)

update_password(voicemail, new_password)

# Reassociate the user to the voicemail
associate_voicemail(user, voicemail)
